# Version no longer needed in Compose v2

services:
  # Nginx reverse proxy for Keycloak with CSP header modification
  nginx:
    image: nginx:alpine
    ports:
      - "${CPU_NODE_PUBLIC_BIND_ADDRESS}:${CPU_NODE_PORT_HTTP}:80"
      # HTTPS port disabled for development - uncomment when SSL is configured
      - "${CPU_NODE_PUBLIC_BIND_ADDRESS}:${CPU_NODE_PORT_HTTPS}:443"
      #- "8181:8181"
      #- "8182:8080"  # Internal redirect from nginx to nginx
    volumes:
      #- ./config/nginx/keycloak-proxy.conf:/etc/nginx/conf.d/keycloak-proxy.conf:ro
      - ./config/nginx/conf.d/default.conf:/etc/nginx/conf.d/app.conf:ro
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/letsencrypt/live/versino.camalacode.org/cert.pem:/rootCA.pem:ro
      - ./config/letsencrypt/live/versino.camalacode.org/fullchain.pem:/fullchain.crt:ro
      - ./config/letsencrypt/live/versino.camalacode.org/privkey.pem:/privkey.key:ro"
      
      - ./config/letsencrypt/options-ssl-nginx.conf:/etc/letsencrypt/options-ssl-nginx.conf:ro"
      - ./config/letsencrypt/ssl-dhparams.pem:/etc/letsencrypt/ssl-dhparams.pem:ro"
      
    #command: sh -c "rm -f /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    depends_on:
      - keycloak
    restart: unless-stopped
    
    networks:
      - app-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.4
    environment:
      - keycloak.migration.strategy=OVERWRITE_EXISTING
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=uncrackablesuperpassword123
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak-db:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak123
      - KC_HTTP_ENABLED=true
      - KC_HTTP_RELATIVE_PATH=/auth
      - KC_HOSTNAME=versino.camalacode.org
      - KC_HOSTNAME_STRICT=false
      - KC_HTTP_ENABLED=true
      - KC_PROXY_HEADERS=xforwarded
      #- KC_HOSTNAME_BACKCHANNEL_DYNAMIC=true
      # Alternative CSP Configuration methods (multiple approaches)
      # Method 1: Environment variables (Keycloak 22.0.5+ syntax)
      #- KC_SPI_SECURITY_HEADERS_CONTENT_SECURITY_POLICY=frame-ancestors 'self' http://localhost http://localhost:3000 https://localhost:3000; frame-src 'self'; object-src 'none'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';
      #- KC_SPI_SECURITY_HEADERS_X_FRAME_OPTIONS=SAMEORIGIN
      # Method 2: Legacy environment variables (fallback)
      #- KC_HTTP_HEADERS_CONTENT_SECURITY_POLICY=frame-ancestors 'self' http://localhost http://localhost:3000 https://localhost:3000; frame-src 'self'; object-src 'none'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';
      #- KC_HTTP_HEADERS_X_FRAME_OPTIONS=SAMEORIGIN
      # Method 3: Provider-specific configuration
      #- KC_SPI_LOGIN_PROTOCOL_OPENID_CONNECT_LEGACY_LOGOUT_REDIRECT_URI=true
      #- KC_SPI_HOSTNAME_DEFAULT_FRONTEND_URL=http://localhost/auth
      # Additional security headers while allowing iframe embedding
      #- KC_HTTP_HEADERS_X_CONTENT_TYPE_OPTIONS=nosniff
      #- KC_HTTP_HEADERS_X_XSS_PROTECTION=1; mode=block
      #- KC_HTTP_HEADERS_REFERRER_POLICY=strict-origin-when-cross-origin
    ports:
      - "8080:8080"
    command: start-dev --import-realm
    depends_on:
      keycloak-db:
        condition: service_healthy
    volumes:
      - ./config/keycloak/import:/opt/keycloak/data/import:ro
    restart: unless-stopped
    networks:
      - app-network

  keycloak-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=keycloak123
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=https://versino.camalacode.org/api/v1
      - VITE_KEYCLOAK_URL=https://versino.camalacode.org/auth
      - VITE_KEYCLOAK_REALM=project-management
      - VITE_KEYCLOAK_CLIENT_ID=pm-frontend
      - VITE_NUCLEAR_IFRAME_BLOCKING=false
      - VITE_FORCE_REDIRECT_AUTH=false
      - VITE_DISABLE_EMBEDDED_CONTENT=false
      - VITE_EMERGENCY_MODE=false
    depends_on:
      - api
      - keycloak
    restart: unless-stopped
    networks:
      - app-network

  api:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://pm_user:pm_password@db:5432/project_management
      - KEYCLOAK_URL=http://keycloak:8080/auth
      - KEYCLOAK_REALM=project-management
      - KEYCLOAK_CLIENT_ID=pm-backend
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET:-your-backend-client-secret}
      - JWT_ALGORITHM=RS256
      - JWT_AUDIENCE=account
      - ALLOWED_ORIGINS=https://versino.camalacode.org,http://versino.camalacode.org:3000,https://versino.camalacode.org:3000
      - DEBUG=${DEBUG:-false}
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_started
    volumes:
      - ./backend:/app:ro
    restart: unless-stopped
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=project_management
      - POSTGRES_USER=pm_user
      - POSTGRES_PASSWORD=pm_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/00-setup.sql:/docker-entrypoint-initdb.d/00-setup.sql:ro
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pm_user -d project_management"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  keycloak_data:

networks:
  app-network:
    driver: bridge
